#!/usr/bin/env python3
import shodan
import sys
import sqlite3
from IPy import IP
import dns.resolver
import re
import urllib.parse

api_key = ""

commands = ["search", "host", "host-add", "host-delete", "host-list", "hostscan-all", "list-scanlogs"]

if api_key == str(""):
    print('please give api_key variable in ' + sys.argv[0] + ' the correct Shodan API value')
    sys.exit(0)

api = shodan.Shodan(api_key)

try:
    if sys.argv[1] == "-h":
        print("'syntax: " + str(commands) + " keyword_or_hostname'")
        print("Please consult the README.md file for more information and usage examples")
        sys.exit(0)

    if sys.argv[1] == "search" and sys.argv[2:]:
        for hosts in sys.argv[2:]:
            try:
        	    results = api.search(hosts)

        	    print('Results found: %s' % results['total'])
        	    for result in results['matches']:
                	    print('IP: %s' % result['ip_str'])
                	    print(result['data'])
                	    print('') 

            except shodan.APIError as e:
                print('Error: %' % e)


    if sys.argv[1] == "host" and sys.argv[2]:
        hostnames = sys.argv[2:]
        hostlist = []
        for hosts in hostnames:
            try: 
                IP(hosts)
                non_ip = 'false'
            except ValueError:
                def dig():
                    for ip in dns.resolver.query(hosts, 'A'):
                        return str(ip)
                hostlist.append(dig())
                non_ip = 'true'
        
        if non_ip == 'true':
            hostnames = hostlist

        for hosts in hostnames:
            host = api.host(hosts)
            print("IP: %s \n Organization: %s \n Operating System: %s" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a')))
            for item in host['data']:
                    print("Port: %s \n Banner: %s \n" % (item['port'], item['data']))

    if sys.argv[1] == "host-add" and sys.argv[2:]:
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                    (varchar)''')
        except sqlite3.OperationalError:
            pass
        for hosts in sys.argv[2:]:
            c.execute('INSERT INTO hostnames VALUES (?)', (hosts,))
            conn.commit()

    if sys.argv[1] == "host-delete" and sys.argv[2:]:
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass
        
        for hosts in sys.argv[2:]:
            conn = sqlite3.connect('shodan-scan')
            c = conn.cursor()
            c.execute("DELETE FROM hostnames WHERE varchar=?", (hosts,))
            conn.commit()

    if sys.argv[1] == "host-list":
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass
        for row in c.execute("SELECT * FROM hostnames"):
            print(row)

    if sys.argv[1] == "hostscan-all":
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass


        
        domain_names = []

        for rows in c.execute('SELECT * FROM hostnames'):
            domain_names.extend(rows)
        
        #STOPPED HERE -- domain_names variable printing incorrect formatting for hostnames

        hostlist = []

        for hosts in domain_names:
            try:
                IP(hosts)
                host_is_ip = 'true'
            except ValueError:
                host_is_ip = 'false'
            
            if host_is_ip == 'true':
                hostlist.append(hosts)
            else:
                def dig():
                    for ip in dns.resolver.query(hosts, 'A'):
                        return str(ip)
                hostlist.append(dig())
 
        hostnames = hostlist

        for hosts in hostnames:
            logfile = []
            def general_info():
                return ("IP: %s \n Organization: %s \n Operating System: %s" % (api.host(hosts)['ip_str'], api.host(hosts).get('org', 'n/a'), api.host(hosts).get('os', 'n/a')))
                
            def other_info():
                conn = sqlite3.connect('shodan-scan')
                c = conn.cursor()
                try:
                    c.execute('''CREATE TABLE hostnames
                                (varchar)''')
                except sqlite3.OperationalError:
                    pass
                for item in api.host(hosts)['data']:
                            return ("Port: %s \n Banner: %s" % (item['port'], item['data'])) 
        
            logfile.append(general_info())
            logfile.append(other_info())
        
            final_logfile = "".join(logfile)

            conn = sqlite3.connect('shodan-scan')
            c = conn.cursor()
            try:
                c.execute('''CREATE TABLE host_logs
                            (varchar)''')
            except sqlite3.OperationalError:
                pass
            c.execute('INSERT INTO host_logs VALUES (?)', (final_logfile,))
            print(final_logfile)
        conn.commit() 

    if sys.argv[1] == "list-scanlogs":
        def all_logs(): 
            conn = sqlite3.connect('shodan-scan')
            c = conn.cursor()
            try: 
                c.execute('''CREATE TABLE host_logs
                            (varchar)''')
            except sqlite3.OperationalError:
                pass
            for row in c.execute("SELECT * FROM host_logs"):
                return(row)
        print_logs = ''.join(all_logs())
        print(print_logs)

except (IndexError, shodan.exception.APIError) as e:
    print('Error: ' + str(e))
