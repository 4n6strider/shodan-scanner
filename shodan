#!/usr/bin/env python3
import shodan
import sys
import sqlite3

api_key = ""

commands = ["search", "host", "host-add", "host-delete", "host-list", "hostscan-all"]

if api_key == str(""):
    print('please give api_key variable in ' + sys.argv[0] + ' the correct Shodan API value')
    sys.exit(0)

api = shodan.Shodan(api_key)

def shodan_hostscan():
	for hosts in hostname_list:
        	host = api.host(hosts)
        	print("IP: %s \n Organization: %s \n Operating System: %s" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a')))
        	for item in host['data']:
                	print("Port: %s \n Banner: %s \n" % (item['port'], item['data'])) 

try:
    if sys.argv[1] == "-h":
        print("'syntax: " + str(commands) + " keyword_or_hostname'")
        print("Please consult the README.md file for more information and usage examples")
        sys.exit(0)

    if sys.argv[1] == "search" and sys.argv[2:]:
        for hosts in sys.argv[2:]:
            try:
        	    results = api.search(hosts)

        	    print('Results found: %s' % results['total'])
        	    for result in results['matches']:
                	    print('IP: %s' % result['ip_str'])
                	    print(result['data'])
                	    print('') 

            except shodan.APIError as e:
                print('Error: %' % e)


    if sys.argv[1] == "host" and sys.argv[2]:
        for hosts in sys.argv[2:]:
            host = api.host(sys.argv[2:])
            #Print general info
            print("IP: %s \n Organization: %s \n Operating System: %s" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a')))
            #Print all banners
            for item in host['data']:
                    print("Port: %s \n Banner: %s \n" % (item['port'], item['data']))

    if sys.argv[1] == "host-add" and sys.argv[2:]:
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                    (varchar)''')
        except sqlite3.OperationalError:
            pass
        for hosts in sys.argv[2:]:
            c.execute('INSERT INTO hostnames VALUES (?)', (hosts,))
            conn.commit()

    if sys.argv[1] == "host-delete" and sys.argv[2:]:
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass
        
        for hosts in sys.argv[2:]:
            conn = sqlite3.connect('shodan-scan')
            c = conn.cursor()
            c.execute("DELETE FROM hostnames WHERE varchar=?", (hosts,))
            conn.commit()

    if sys.argv[1] == "host-list":
        conn = sqlite3.connect('shodan-scan')
        c = conn.cursor()
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass
        for row in c.execute("SELECT * FROM hostnames"):
            print(row)

    if sys.argv[1] == "hostscan-all":
        try: 
            c.execute('''CREATE TABLE hostnames
                        (varchar)''')
        except sqlite3.OperationalError:
            pass
        for hosts in hostname_list:
            host = api.host(hosts)
            print("IP: %s \n Organization: %s \n Operating System: %s" % (host['ip_str'], host.get('org', 'n/a'), host.get('os', 'n/a')))
            for item in host['data']:
                print("Port: %s \n Banner: %s \n" % (item['port'], item['data'])) 
            
except (IndexError, shodan.exception.APIError) as e:
    print('Error: ' + str(e))
